// Generated by CoffeeScript 1.7.1
(function() {
  var exec, fs, utf8fdfFileGenerator;

  utf8fdfFileGenerator = require('utf8-fdf-generator').generator;

  exec = require('child_process').exec;

  fs = require('fs');

  exports.generateContent = function(pdf_path, definitions_array, callback) {
    var guid, process_next_pdf;
    guid = function() {
      var s4;
      s4 = function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
      };
      return "" + (s4()) + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + "-" + (s4()) + (s4()) + (s4());
    };
    process_next_pdf = function(definitions_array, currently_completed, callback) {
      var baseGUID, current, data, fileNameFDF, fileNamePDF, fileNamePDFCombined, pdfFileNamesList;
      data = definitions_array.shift();
      if (data) {
        baseGUID = guid();
        fileNameFDF = "fdf-" + baseGUID + ".fdf";
        fileNamePDF = "pdf-" + baseGUID + ".pdf";
        utf8fdfFileGenerator(data, fileNameFDF);
        exec("pdftk " + pdf_path + " fill_form " + fileNameFDF + " output " + fileNamePDF + " flatten", function(error, stdout, stderr) {
          if (error != null) {
            throw "ERROR: While generating individual PDF - " + stderr;
          } else {
            currently_completed.push({
              data: data,
              error: error,
              stdout: stdout,
              stderr: stderr,
              fdf: fileNameFDF,
              pdf: fileNamePDF
            });
            process_next_pdf(definitions_array, currently_completed, callback);
          }
        });
        return;
      } else {
        fileNamePDFCombined = "combined-" + (guid()) + ".pdf";
        pdfFileNamesList = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = currently_completed.length; _i < _len; _i++) {
            current = currently_completed[_i];
            _results.push(current.pdf);
          }
          return _results;
        })();
        pdfFileNamesList = pdfFileNamesList.join(" ");
        exec("pdftk " + pdfFileNamesList + " cat output " + fileNamePDFCombined, function(error, stdout, stderr) {
          var combinedPDFfileContents, _i, _len;
          if (error != null) {
            throw "ERROR: While generating combined PDF - " + stderr;
          } else {
            for (_i = 0, _len = currently_completed.length; _i < _len; _i++) {
              current = currently_completed[_i];
              fs.unlinkSync(current.fdf);
              fs.unlinkSync(current.pdf);
            }
            combinedPDFfileContents = fs.readFileSync(fileNamePDFCombined);
            fs.unlinkSync(fileNamePDFCombined);
            callback(combinedPDFfileContents);
          }
        });
        return;
      }
    };
    process_next_pdf(definitions_array, [], callback);
  };

  exports.generateFile = function(pdf_path, definitions_array, outputPDFFileName, callback) {
    return exports.generateContent(pdf_path, definitions_array, function(pdfContents) {
      var error;
      try {
        fs.writeFileSync(outputPDFFileName, pdfContents);
        return callback(null, pdfContents, outputPDFFileName);
      } catch (_error) {
        error = _error;
        return callback(error, null, null);
      }
    });
  };

}).call(this);
